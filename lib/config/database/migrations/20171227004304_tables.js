exports.up = function(knex, Promise) {
  return knex.schema
    .createTableIfNotExists('organizations', table => {
      table.increments()
      table.string('name')
      table.string('description')
      table.string('type')
      table.string('logo')
      table.string('email_address')
      table.text('phone_number')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('users', table => {
      table.increments()
      table.string('username')
      table.string('email_address', 60)
      table.string('password', 65)
      table.json('google_oauth_profile')
      table.text('phone_number')
      table.text('first_name')
      table.text('last_name')
      table.text('display_name')
      table.string('photo')
      table.boolean('is_super_admin')
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('audiences', table => {
      table.increments()
      table.string('name')
      table.string('description')
      table.enu('labels', [])
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('conversations', table => {
      table.increments()
      table.string('name')
      table.enu('dedicate_phone', [])
      table.enu('labels', [])
      table.boolean('status')
      table.string('conversation_delivery')
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('customers', table => {
      table.increments()
      table.string('first_name')
      table.string('last_name')
      table.text('phone')
      table.text('email')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('customer_infos', table => {
      table.increments()
      table.json('info')
      table.string('twilio_phone')
      table
        .integer('customer_id')
        .unsigned()
        .references('id')
        .inTable('customers')
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('templates', table => {
      table.increments()
      table.string('name')
      table.enu('category', [])
      table.enu('label', [])
      table.json('html')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('messages', table => {
      table.increments()
      table.json('html')
      table.json('conversation_level')
      table.string('url')
      table.integer('no_of_sent')
      table.json('other')
      table
        .integer('conversation_id')
        .unsigned()
        .references('id')
        .inTable('conversations')
      table
        .integer('template_id')
        .unsigned()
        .references('id')
        .inTable('templates')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('muted', table => {
      table.increments()
      table
        .integer('customer_id')
        .unsigned()
        .references('id')
        .inTable('customers')
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('customer_audiences', table => {
      table.increments()
      table
        .integer('customer_id')
        .unsigned()
        .references('id')
        .inTable('customers')
      table
        .integer('audience_id')
        .unsigned()
        .references('id')
        .inTable('audiences')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('conversation_audiences', table => {
      table.increments()
      table
        .integer('conversation_id')
        .unsigned()
        .references('id')
        .inTable('conversations')
      table
        .integer('audience_id')
        .unsigned()
        .references('id')
        .inTable('audiences')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('customer_messages', table => {
      table.increments()
      table
        .integer('customer_id')
        .unsigned()
        .references('id')
        .inTable('customers')
      table
        .integer('message_id')
        .unsigned()
        .references('id')
        .inTable('messages')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('responses', table => {
      table.increments()
      table.string('message')
      table.string('phone')
      table
        .integer('message_id')
        .unsigned()
        .references('id')
        .inTable('messages')
      table
        .integer('customer_id')
        .unsigned()
        .references('id')
        .inTable('customers')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('typelinks', table => {
      table.increments()
      table.string('word')
      table.integer('no_of_recieved')
      table
        .integer('message_id')
        .unsigned()
        .references('id')
        .inTable('messages')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('billing_plans', table => {
      table.increments()
      table.string('name')
      table.float('amount')
      table.string('frequency')
      table.float('cost_outbound_message')
      table.float('cost_inbound_message')
      table.float('cost_generate_message')
      table.float('recharge_threshold')
      table.float('recharge_base')
      table.timestamps(true, true)
    })
    .createTableIfNotExists('billing_organizations', table => {
      table.increments()
      table.float('balance')
      table.dateTime('last_payment_date')
      table.integer('volume_sent')
      table.integer('volume_recieved')
      table.integer('volume_lookup')
      table
        .integer('organization_id')
        .unsigned()
        .references('id')
        .inTable('organizations')
      table
        .integer('billing_plan_id')
        .unsigned()
        .references('id')
        .inTable('billing_plans')
      table.timestamps(true, true)
    })
}

exports.down = function(knex, Promise) {
  return knex.schema
    .dropTable('billing_organizations')
    .dropTable('billing_plans')
    .dropTable('typelinks')
    .dropTable('responses')
    .dropTable('customer_messages')
    .dropTable('conversation_audiences')
    .dropTable('customer_audiences')
    .dropTable('muted')
    .dropTable('messages')
    .dropTable('templates')
    .dropTable('customer_infos')
    .dropTable('customers')
    .dropTable('conversations')
    .dropTable('audiences')
    .dropTable('users')
    .dropTable('organizations')
}
